# ========================= User Defined Macro ==============================

# Most time you just need edit user defined macro
!define PRODUCT_NAME           "yunVM"
!define APP_NAME               "yunVM"
!define EXE_NAME               "yunVM.exe"
!define EXE_RELATIVE_PATH      "yunVM.exe"
!ifdef PRODUCT_VERSION

!else
  !define PRODUCT_VERSION "1.0.0.0"
!endif
!define PRODUCT_PUBLISHER      "Bangyan Technology Co., Ltd"
!define PRODUCT_LEGAL          "Copyright (C) 2023-2030 bangyan technology, All Rights Reserved"
!define INSTALL_ICON_PATH      "Install.ico"
!define UNINSTALL_ICON_PATH    "Uninstall.ico"
!define DEFAULT_INSTALL_DIR    "$PROGRAMFILES\${APP_NAME}"

Var /GLOBAL installDir
; 定义一个是否自动安装的参数变量：
Var /GLOBAL AutoInstall

!ifdef DEBUG
!define UI_PLUGIN_NAME         nsQtPluginD
!define VC_RUNTIME_DLL_SUFFIX  d
!define QT_DLL_SUFFIX          d
!else
!define UI_PLUGIN_NAME         nsQtPlugin
!define VC_RUNTIME_DLL_SUFFIX
!define QT_DLL_SUFFIX
!endif

# ========================= User Defined Macro End ============================

!include "LogicLib.nsh"
!include "nsDialogs.nsh"


# ===================== Setup Info =============================
VIProductVersion                    "${PRODUCT_VERSION}"
VIAddVersionKey "ProductVersion"    "${PRODUCT_VERSION}"
VIAddVersionKey "ProductName"       "${APP_NAME}"
VIAddVersionKey "CompanyName"       "${PRODUCT_PUBLISHER}"
VIAddVersionKey "FileVersion"       "${PRODUCT_VERSION}"
VIAddVersionKey "InternalName"      "${EXE_NAME}"
VIAddVersionKey "FileDescription"   "${APP_NAME} for windows"
VIAddVersionKey "LegalCopyright"    "${PRODUCT_LEGAL}"

# ==================== NSIS Attribute ================================

Unicode True
SetCompressor LZMA
!ifdef DEBUG
Name "${PRODUCT_NAME} [Debug]"
OutFile "${PRODUCT_NAME}-${PRODUCT_VERSION}-setup-x86-debug.exe"
!else
Name "${PRODUCT_NAME}"
OutFile "${PRODUCT_NAME}-${PRODUCT_VERSION}-x86-setup.exe"
!endif

# ICON
Icon              "${INSTALL_ICON_PATH}"
UninstallIcon     "${UNINSTALL_ICON_PATH}"

# UAC
# RequestExecutionLevel none|user|highest|admin
RequestExecutionLevel admin


# Custom Install Page
Page custom QtUiPage


# Show Uninstall details
UninstPage instfiles

# ======================= Qt Page =========================
Function QtUiPage
	${UI_PLUGIN_NAME}::OutputDebugInfo "NSIS Plugin Dir: $PLUGINSDIR, AutoInstall: $AutoInstall"

	GetFunctionAddress $0 OnUIPrepared
	${UI_PLUGIN_NAME}::BindInstallEventToNsisFunc "UI_PREPARED" $0

	GetFunctionAddress $0 OnStartExtractFiles
	${UI_PLUGIN_NAME}::BindInstallEventToNsisFunc "START_EXTRACT_FILES" $0

	GetFunctionAddress $0 OnBeforeFinished
	${UI_PLUGIN_NAME}::BindInstallEventToNsisFunc "BEFORE_FINISHED" $0

	GetFunctionAddress $0 OnUserCancelInstall
	${UI_PLUGIN_NAME}::BindInstallEventToNsisFunc "USER_CANCEL" $0

    ${UI_PLUGIN_NAME}::ShowSetupUI "${PRODUCT_NAME} Setup" "$installDir" "$PLUGINSDIR" "$AutoInstall"
FunctionEnd

Function OnUIPrepared
	${UI_PLUGIN_NAME}::OutputDebugInfo "OnUIPrepared"
FunctionEnd

Function OnStartExtractFiles
	${UI_PLUGIN_NAME}::OutputDebugInfo "OnStartExtractFiles"

	${UI_PLUGIN_NAME}::GetInstallDirectory
	Pop $0
	StrCmp $0 "" InstallAbort 0
    StrCpy $INSTDIR "$0"
	${UI_PLUGIN_NAME}::OutputDebugInfo "Install Dir: $0"

	SetOutPath $INSTDIR

    GetFunctionAddress $0 ___ExtractFiles
    ${UI_PLUGIN_NAME}::BackgroundRun $0


InstallAbort:
FunctionEnd


Function OnUserCancelInstall
	${UI_PLUGIN_NAME}::OutputDebugInfo "OnUserCancelInstall"

	Abort
FunctionEnd


Function OnBeforeFinished
	${UI_PLUGIN_NAME}::OutputDebugInfo "OnBeforeFinished"

	SetShellVarContext all
	CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
	CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$INSTDIR\${EXE_RELATIVE_PATH}"
	CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall ${PRODUCT_NAME}.lnk" "$INSTDIR\uninst.exe"
	SetShellVarContext current


	# Create Desktop Shortcut
	${UI_PLUGIN_NAME}::IsCreateDesktopShortcutEnabled
	Pop $0
	${If} $0 == 1
		SetShellVarContext all
		CreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "$INSTDIR\${EXE_RELATIVE_PATH}"
		SetShellVarContext current
	${EndIf}


	# Auto Startup On Boot
	${UI_PLUGIN_NAME}::IsAutoStartupOnBootEnabled
	Pop $0
	${If} $0 == 1
		WriteRegStr HKCU "Software\Microsoft\Windows\CurrentVersion\Run" "${APP_NAME}" "$INSTDIR\${EXE_RELATIVE_PATH}"
	${EndIf}
FunctionEnd


# !!! Don't Edit This Function !!!
# This Function Generated by Python Script(NsisScriptGenerate.py)
Function ___ExtractFiles
	Call OnAfterExtractFiles
FunctionEnd


Function OnAfterExtractFiles
	${UI_PLUGIN_NAME}::OutputDebugInfo "OnAfterExtractFiles"
	${UI_PLUGIN_NAME}::NsisExtractFilesFinished
	Call CreateUninstall
FunctionEnd



Function CreateUninstall
	WriteUninstaller "$INSTDIR\uninst.exe"
	WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "DisplayName" "${PRODUCT_NAME}"
	WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "UninstallString" "$INSTDIR\uninst.exe"
	WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "InstallLocation" "$INSTDIR"
	WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "DisplayIcon" "$INSTDIR\${EXE_NAME}"
	WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "Publisher" "${PRODUCT_PUBLISHER}"
FunctionEnd

# Add an empty section, avoid compile error.
Section "None"
SectionEnd


# Uninstall Section
Section "Uninstall"

  SetShellVarContext all
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk"
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall ${PRODUCT_NAME}.lnk"
  RMDir "$SMPROGRAMS\${PRODUCT_NAME}\"
  Delete "$DESKTOP\${PRODUCT_NAME}.lnk"

  # 删除注册表项
  DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}"


  MessageBox MB_ICONQUESTION|MB_YESNO "Uninstall" /SD IDYES IDYES +2 IDNO +1


  SetShellVarContext current

  SetOutPath "$INSTDIR"

  ; Delete installed files
  Delete "$INSTDIR\*.*"

  SetOutPath "$DESKTOP"

  RMDir /r "$INSTDIR"
  RMDir "$INSTDIR"

  SetAutoClose true
SectionEnd



Function .onInit
	# makesure plugin directory exist
	InitPluginsDir

	# place Qt dlls to plugin directory
    File /oname=$PLUGINSDIR\Qt5Core${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\Qt5Core${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\Qt5Gui${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\Qt5Gui${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\Qt5Widgets${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\Qt5Widgets${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\Qt5Svg${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\Qt5Svg${QT_DLL_SUFFIX}.dll"

	CreateDirectory $PLUGINSDIR\platforms
	File /oname=$PLUGINSDIR\platforms\qwindows${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\platforms\qwindows${QT_DLL_SUFFIX}.dll"

	CreateDirectory $PLUGINSDIR\styles
	File /oname=$PLUGINSDIR\styles\qwindowsvistastyle${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\styles\qwindowsvistastyle${QT_DLL_SUFFIX}.dll"

	CreateDirectory $PLUGINSDIR\imageformats
	File /oname=$PLUGINSDIR\imageformats\qgif${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\imageformats\qgif${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\imageformats\qicns${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\imageformats\qicns${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\imageformats\qico${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\imageformats\qico${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\imageformats\qjpeg${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\imageformats\qjpeg${QT_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\imageformats\qsvg${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\imageformats\qsvg${QT_DLL_SUFFIX}.dll"
	CreateDirectory $PLUGINSDIR\iconengines

	File /oname=$PLUGINSDIR\iconengines\qsvgicon${QT_DLL_SUFFIX}.dll "QtRuntimeDLL\iconengines\qsvgicon${QT_DLL_SUFFIX}.dll"

	# place vc runtime dlls to plugin directory
	File /oname=$PLUGINSDIR\concrt140${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\concrt140${VC_RUNTIME_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\msvcp140${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\msvcp140${VC_RUNTIME_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\msvcp140_1${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\msvcp140_1${VC_RUNTIME_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\msvcp140_2${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\msvcp140_2${VC_RUNTIME_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\ucrtbase${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\ucrtbase${VC_RUNTIME_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\vccorlib140${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\vccorlib140${VC_RUNTIME_DLL_SUFFIX}.dll"
	File /oname=$PLUGINSDIR\vcruntime140${VC_RUNTIME_DLL_SUFFIX}.dll "VCRuntimeDLL\vcruntime140${VC_RUNTIME_DLL_SUFFIX}.dll"

    # 读取注册表中的安装路径
    ReadRegStr $installDir HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}" "InstallLocation"

    # 动态修改默认安装路径
    StrCmp $installDir "" 0 +2
    StrCpy $installDir "${DEFAULT_INSTALL_DIR}"

	; Initialize AutoInstall variable to default value "0"
    StrCpy $AutoInstall "0"

    ; Get the command line arguments
    ; Note: Command line arguments are stored in $0, $1, ..., $n
    ; Loop through command line arguments
    StrCpy $0 $CMDLINE
    ${Do}
        ; Extract the parameter and value
        ${StrTok} $0 "=" $1 $2
        StrCmp $1 "/AutoInstall" 0 +2
        ; Set AutoInstall variable if the parameter is found
        StrCpy $AutoInstall $2
        ; Stop further processing
        Goto ${End}
    ${Loop}
    ${End}

FunctionEnd



Function .onInstSuccess

FunctionEnd


Function .onInstFailed
    MessageBox MB_ICONQUESTION|MB_YESNO "Instll filed!" /SD IDYES IDYES +2 IDNO +1
FunctionEnd



# Before Uninstall
Function un.onInit
    MessageBox MB_ICONQUESTION|MB_YESNO "Are you sure to uninstall $PRODUCT_NAME?" /SD IDYES IDYES +2 IDNO +1
    Abort
FunctionEnd

Function un.onUninstSuccess

FunctionEnd


